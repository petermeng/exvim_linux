"------------------------------------------------------------------------------
"  < 判断操作系统是否是 Windows 还是 Linux >
"------------------------------------------------------------------------------
if(has("win32") || has("win64") || has("win95") || has("win16"))
    let g:iswindows = 1
else
    let g:iswindows = 0
    set t_Co=256
endif

"------------------------------------------------------------------------------
"  < 判断是终端还是 Gvim >
"------------------------------------------------------------------------------
if has("gui_running")
    let g:isGUI = 1
else
    let g:isGUI = 0
endif

"silent exec 'language english'
"********************************encoding**************************************
"默认为 UTF-8 编码
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,big5,euc-jp,euc-kr,latin1
set fileencoding=utf-8 
let &termencoding=&encoding
"set shell=sh

"********************************ui**************************************
"字体/配色
"以下为解决中文显示问题,以及相应带来的提示及菜单乱码问题
""********************************language**************************************

"语言中文

set encoding=utf-8 " 设置vim内部使用的字符编码,原来是cp936
lang messages zh_CN.UTF-8 " 解决consle输出乱码 
"解决菜单乱码 
source $VIMRUNTIME/delmenu.vim 
source $VIMRUNTIME/menu.vim

"********************************ui**************************************
"字体/配色
"以下为解决中文显示问题,以及相应带来的提示及菜单乱码问题
set encoding=utf-8 " 设置vim内部使用的字符编码,原来是cp936
lang messages zh_CN.UTF-8 " 解决consle输出乱码 

set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin
syntax enable
syntax on 

"set guifont=Courier\ New:h13
set nu!
set ts=2
set sw=2
set smartindent
set laststatus=2
set cursorline
set autoindent
set cindent
set linebreak
set hidden
set gdefault
set scrolloff=5
set ruler        " 在编辑过程中，在右下角显示光标位置的状态行
set hlsearch    " 高亮显示搜索结果
set incsearch    " 查询时非常方便，如要查找book单词，当输入到/b时，会自动找到
set ignorecase smartcase
set foldmethod=syntax
set foldlevel=100       " Don't autofold anything (but I can still fold manually)
set showmatch       " 设置匹配模式，类似当输入一个左括号时会匹配相应的那个右括号
set expandtab
set tabstop=2
set nobk
"set clipboard+=unnamed
set clipboard=unnamed
set autoread
"状态栏显示目前所执行的指令
set showcmd 
set wildmenu
"--------------------------------------------------------------------------------
" 代码折叠
"--------------------------------------------------------------------------------
set foldmarker={,}
"set foldmethod=marker
set foldmethod=syntax
set foldlevel=100       " Don't autofold anything (but I can still fold manually)
"set foldopen-=search   " don't open folds when you search into them
"set foldopen-=undo     " don't open folds when you undo stuff
"set foldcolumn=4
"高亮、实时搜索
set hlsearch  
set magic     
set showmatch 
set mat=2    
set incsearch
set ignorecase

"制表符
set tabstop=2
set expandtab
set smarttab
set shiftwidth=2
set softtabstop=2
set sw=2
set ts=2
"行号和标尺
set number
set ruler
set rulerformat=%15(%c%V\ %p%%%)
"标签页
set tabpagemax=9
set showtabline=2
set laststatus=2
"PerlSupport--------------------------------------------
let g:Perl_Executable="perl"

" If doing a diff. Upon writing changes to file, automatically update the
" differences
autocmd BufWritePost * if &diff == 1 | diffupdate | endif

" 设置环境保存项
set sessionoptions="blank,buffers,globals,localoptions,tabpages,sesdir,folds,help,options,resize,winpos,winsize"
" 保存 undo 历史
set undodir=~/.undo_history/
set undofile
" 保存快捷键
map <leader>ass :mksession! my.vim<cr> :wviminfo! my.viminfo<cr>
" 恢复快捷键
map <leader>ars :source my.vim<cr> :rviminfo my.viminfo<cr>

nnoremap <unique> <silent> <F2> :EXProjectToggle<cr>

" ===
" === Markdown Settings
" ===
" Snippets
if exists('g:exvim_custom_path')
    let md_snippets_path = g:exvim_custom_path.'/md-snippets.vim'
else
    let md_snippets_path = '~/md-snippets.vim'
endif
if filereadable(expand(md_snippets_path))
    exec 'source ' . fnameescape(md_snippets_path)
endif
" auto spell
autocmd BufRead,BufNewFile *.md setlocal spell

" Press space twice to jump to the next '<++>' and edit it
noremap <LEADER><LEADER><LEADER> <Esc>/<++><CR>:nohlsearch<CR>c4l

" ===
" === Tab management
" ===
" Create a new tab with tu
noremap tu :tabe<CR>
" Move around tabs with tn and ti
noremap tn :-tabnext<CR>
noremap ti :+tabnext<CR>
" Move the tabs with tmn and tmi
noremap tmn :-tabmove<CR>
noremap tmi :+tabmove<CR>

" ===
" === Window management
" ===
" Use <space> + new arrow keys for moving the cursor around windows
noremap <LEADER>w <C-w>w
noremap <LEADER>kk <C-w>k
noremap <LEADER>jj <C-w>j
noremap <LEADER>hh <C-w>h
noremap <LEADER>ll <C-w>l
noremap qf <C-w>o

" Disable the default s key
noremap s <nop>

" split the screens to up (horizontal), down (horizontal), left (vertical), right (vertical)
noremap sk :set nosplitbelow<CR>:split<CR>:set splitbelow<CR>
noremap sj :set splitbelow<CR>:split<CR>
noremap sh :set nosplitright<CR>:vsplit<CR>:set splitright<CR>
noremap sl :set splitright<CR>:vsplit<CR>

" Resize splits with arrow keys
noremap <up> :res +5<CR>
noremap <down> :res -5<CR>
noremap <left> :vertical resize-5<CR>
noremap <right> :vertical resize+5<CR>

" Place the two screens up and down
noremap sh <C-w>t<C-w>K
" Place the two screens side by side
noremap sv <C-w>t<C-w>H

" Rotate screens
noremap srh <C-w>b<C-w>K
noremap srv <C-w>b<C-w>H

" Search
noremap <LEADER><CR> :nohlsearch<CR>

" Adjacent duplicate words
noremap <LEADER>dw /\(\<\w\+\>\)\_s*\1

" Spelling Check with <space>sc
noremap <LEADER>sc :set spell!<CR>
