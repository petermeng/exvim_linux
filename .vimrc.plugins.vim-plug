" Pathogen or Vundle (deafult is Vundle) {{{

" Comment-out if you want to use pahogen
" execute pathogen#infect()
" com! -nargs=+ Bundle

" man.vim: invoked by :Man {name}
source $VIMRUNTIME/ftplugin/man.vim

" let Vundle manage Vundle, required
" ---------------------------------------------------
Plug 'VundleVim/Vundle.vim'

"}}}

" general plugins {{{

" ex-config:
" ---------------------------------------------------
Plug 'exvim/ex-config'
nnoremap <unique> <leader>ve :call exconfig#edit_cur_vimentry ()<CR>

" ex-utility:
" ---------------------------------------------------
Plug 'exvim/ex-utility'

nnoremap <unique> <silent> <Leader>bd :EXbd<CR>
nnoremap <unique> <silent> <C-l> :EXbn<CR>
nnoremap <unique> <silent> <C-h> :EXbp<CR>
nnoremap <unique> <silent> <C-Tab> :EXbalt<CR>
nnoremap <unique> <silent> <Leader><Tab> :EXsw<CR>
nmap <unique> <silent> <Leader><Esc> :EXgp<CR><ESC>

" ex-aftercolor
" ---------------------------------------------------
Plug 'exvim/ex-aftercolors'

" ex-vimentry
" ---------------------------------------------------
Plug 'exvim/ex-vimentry'

" ex-project
" ---------------------------------------------------
Plug 'exvim/ex-project'

" ex-gsearch
" ---------------------------------------------------
Plug 'exvim/ex-gsearch'

" ex-tagselect
" ---------------------------------------------------
Plug 'exvim/ex-tags'

" ex-symbol
" ---------------------------------------------------
Plug 'exvim/ex-symbol'

" ex-cscope
" ---------------------------------------------------
Plug 'exvim/ex-cscope'

" ex-qfix
" ---------------------------------------------------
Plug 'exvim/ex-qfix'

" ex-hierarchy
" ---------------------------------------------------
Plug 'exvim/ex-hierarchy'

nnoremap <unique> <leader>hv :EXHierarchyCWord<CR>

" ex-taglist: invoke by <F4>
" ---------------------------------------------------
Plug 'exvim/ex-taglist'

" F4:  Switch on/off TagList
nnoremap <unique> <silent> <F4> :TlistToggle<CR>

"let Tlist_Ctags_Cmd = $VIM.'/vimfiles/ctags.exe' " location of ctags tool
let Tlist_Show_One_File = 1 " Displaying tags for only one file~
let Tlist_Exist_OnlyWindow = 1 " if you are the last, kill yourself
let Tlist_Use_Right_Window = 1 " split to the right side of the screen
let Tlist_Sort_Type = "order" " sort by order or name
let Tlist_Display_Prototype = 0 " do not show prototypes and not tags in the taglist window.
let Tlist_Compart_Format = 1 " Remove extra information and blank lines from the taglist window.
let Tlist_GainFocus_On_ToggleOpen = 1 " Jump to taglist window on open.
let Tlist_Display_Tag_Scope = 1 " Show tag scope next to the tag name.
let Tlist_Close_On_Select = 0 " Close the taglist window when a file or tag is selected.
let Tlist_BackToEditBuffer = 0 " If no close on select, let the user choose back to edit buffer or not
let Tlist_Enable_Fold_Column = 0 " Don't Show the fold indicator column in the taglist window.
let Tlist_WinWidth = 40
let Tlist_Compact_Format = 1 " do not show help
" let Tlist_Ctags_Cmd = 'ctags --c++-kinds=+p --fields=+iaS --extra=+q --languages=c++'
" very slow, so I disable this
" let Tlist_Process_File_Always = 1 " To use the :TlistShowTag and the :TlistShowPrototype commands without the taglist window and the taglist menu, you should set this variable to 1.
":TlistShowPrototype [filename] [linenumber]

" add javascript language
let tlist_javascript_settings = 'javascript;v:global variable:0:0;c:class;p:property;m:method;f:function;r:object'
" add hlsl shader language
let tlist_hlsl_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;v:variable;f:function'
" add actionscript language
let tlist_actionscript_settings = 'actionscript;c:class;f:method;p:property;v:variable'

" DISABLE: use tlist instead
" " exvim/ex-tagbar: invoke by <F4>
" " ---------------------------------------------------
" Plug 'exvim/ex-tagbar'

" nnoremap <unique> <silent> <F4> :TagbarToggle<CR>

" let g:tagbar_sort = 0
" let g:tagbar_map_preview = '<CR>'
" if has('gui_running')
"     let g:tagbar_map_close = '<Esc>'
" else
"     let g:tagbar_map_close = '<leader><Esc>'
" endif
" let g:tagbar_map_zoomwin = '<Space>'
" let g:tagbar_zoomwidth = 80
" let g:tagbar_autofocus = 1
" let g:tagbar_iconchars = ['+', '-']

" " use command ':TagbarGetTypeConfig lang' change your settings
" let g:tagbar_type_javascript = {
"     \ 'ctagsbin': 'ctags',
"     \ 'kinds' : [
"         \ 'v:global variables:0:0',
"         \ 'c:classes',
"         \ 'p:properties:0:0',
"         \ 'm:methods',
"         \ 'f:functions',
"         \ 'r:object',
"     \ ],
" \ }
" let g:tagbar_type_c = {
"     \ 'kinds' : [
"         \ 'd:macros:0:0',
"         \ 'p:prototypes:0:0',
"         \ 'g:enums',
"         \ 'e:enumerators:0:0',
"         \ 't:typedefs:0:0',
"         \ 's:structs',
"         \ 'u:unions',
"         \ 'm:members:0:0',
"         \ 'v:variables:0:0',
"         \ 'f:functions',
"     \ ],
" \ }
" let g:tagbar_type_cpp = {
"     \ 'kinds' : [
"         \ 'd:macros:0:0',
"         \ 'p:prototypes:0:0',
"         \ 'g:enums',
"         \ 'e:enumerators:0:0',
"         \ 't:typedefs:0:0',
"         \ 'n:namespaces',
"         \ 'c:classes',
"         \ 's:structs',
"         \ 'u:unions',
"         \ 'f:functions',
"         \ 'm:members:0:0',
"         \ 'v:variables:0:0',
"     \ ],
" \ }

" DISABLE: minibufexpl makes Vim editing slow when there are too many buffers opened
"          if you don't mind, and love this plugin, uncomment the script below
"          to enable it
" ex-minibufexpl
" ---------------------------------------------------
" Plug 'exvim/ex-minibufexpl'
" let g:miniBufExplBuffersNeeded = 0
" let g:miniBufExplUseSingleClick = 1 " If you would like to single click on tabs rather than double clicking on them to goto the selected buffer.
" let g:miniBufExplMaxSize = 1 " <max lines: default 0> setting this to 0 will mean the window gets as big as needed to fit all your buffers.
" let g:miniBufExplTabWrap = 1
" " let g:miniBufExplDebugMode  = 3
" " let g:miniBufExplDebugLevel = 0

" ex-autocomplpop: invoke when you input text
" ---------------------------------------------------
Plug 'exvim/ex-autocomplpop'

" ex-showmarks: invoke by m... or <leader>mm, <leader>ma
" ---------------------------------------------------
Plug 'exvim/ex-showmarks'

" TODO: bootleq/ShowMarks on github is well organized in code, but have lots
" bugs, consider merge his code and fixes the bugs
let g:showmarks_enable = 1
let g:showmarks_include = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
let g:showmarks_ignore_type = 'hqm' " Ignore help, quickfix, non-modifiable buffers
" Hilight lower & upper marks
let g:showmarks_hlline_lower = 1
let g:showmarks_hlline_upper = 0

" ex-visincr: invoke when select text and type ':II'
" ---------------------------------------------------
Plug 'exvim/ex-visincr'

" ex-matchit: invoke by %
" ---------------------------------------------------
Plug 'exvim/ex-matchit'

" ex-easyhl:
" ---------------------------------------------------
Plug 'exvim/ex-easyhl'

" searchcompl: invoke by /
" ---------------------------------------------------
Plug 'exvim/ex-searchcompl'

" ex-colorschemes
" ---------------------------------------------------
Plug 'exvim/ex-colorschemes'

" vim-color-solarized
" ---------------------------------------------------
Plug 'altercation/vim-colors-solarized'

" DISABLE: vim-airline makes Vim editing slow when there are too many buffers opened
"          if you don't mind, and love this plugin, uncomment the script below
"          to enable it
" vim-airline
" ---------------------------------------------------
" Plug 'bling/vim-airline'

" if has('gui_running')
"     let g:airline_powerline_fonts = 1
" else
"     let g:airline_powerline_fonts = 0
" endif

" let g:airline#extensions#tabline#enabled = 0 " NOTE: When you open lots of buffers and typing text, it is so slow.
" let g:airline#extensions#tabline#show_buffers = 1
" let g:airline#extensions#tabline#buffer_nr_show = 1
" let g:airline#extensions#tabline#fnamemod = ':t'
" " let g:airline_section_b = "%{fnamemodify(bufname('%'),':p:.:h').'/'}"
" " let g:airline_section_c = '%t'
" " let g:airline_section_warning = airline#section#create(['whitespace']) " NOTE: airline#section#create has no effect in .vimrc initialize pahse
" " let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#whitespace#check(),0)}'
" let g:airline_section_warning = ''

" ctrlp: invoke by <ctrl-p>
Plug 'ctrlpvim/ctrlp.vim'
let g:ctrlp_working_path_mode = ''
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:10'
let g:ctrlp_follow_symlinks = 2
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll|o|lib|axf|mbn|pyc|elf)$',
    \ }
let g:ctrlp_max_files = 0 " Unset cap of 10,000 files so we find everything
nnoremap <unique> <leader>bs :CtrlPBuffer<CR>

" vim-fugitive: invoke most by :Gdiff
" ---------------------------------------------------
Plug 'tpope/vim-fugitive'

" vim-surround: invoke when you select words and press 's'
" ---------------------------------------------------
Plug 'tpope/vim-surround'

xmap s <Plug>VSurround

" DISABLE
" " Plug 'tpope/vim-dispatch'
" " ---------------------------------------------------

" nerdtree: invoke by :NERDTreeToggle
" ---------------------------------------------------
Plug 'scrooloose/nerdtree'

let g:NERDTreeWinSize = 30
let g:NERDTreeMouseMode = 1
let g:NERDTreeMapToggleZoom = '<Space>'

" nerdcommenter: invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <C-F11>
" ---------------------------------------------------
Plug 'scrooloose/nerdcommenter'

let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
            \ 'vimentry': { 'left': '--' },
            \ }
map <unique> <F11> <Plug>NERDCommenterAlignBoth
map <unique> <C-F11> <Plug>NERDCommenterUncomment

" syntastic: invoke when you save file and have syntac-checker
" ---------------------------------------------------
Plug 'scrooloose/syntastic'

" this will make html file by Angular.js ignore errors
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]

" DISABLE: use ex-autocomplpop instead
" " neocomplcache: invoke when you insert words
" Plug 'Shougo/neocomplcache.vim'
" " ---------------------------------------------------

" let g:neocomplcache_enable_at_startup = 1
" let g:neocomplcache_auto_completion_start_length = 2
" let g:neocomplcache_enable_smart_case = 1
" let g:neocomplcache_enable_auto_select = 1 " let neocomplcache's completion behavior like AutoComplPop
" " let g:neocomplcache_disable_auto_complete = 1 " Enable this if you like TAB for complete
" " inoremap <C-p> <C-x><C-u>
" " inoremap <expr><TAB>  pumvisible() ? '\<Down>' : '<TAB>'
" " inoremap <expr><S-TAB>  pumvisible() ? '\<Up>' : ''

" DISABLE: use ex-autocomplpop instead
" " neocomplete: invoke when you insert words
" Plug 'Shougo/neocomplete.vim'
" " ---------------------------------------------------

" let g:neocomplete#enable_at_startup = 1
" let g:neocomplete#enable_smart_case = 1
" let g:neocomplete#enable_auto_select = 1 " let neocomplete's completion behavior like AutoComplPop
" " Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" DISABLE: use ex-autocomplpop instead
" " YouCompleteMe
" Plug 'Valloric/YouCompleteMe'
" " ---------------------------------------------------

" TODO: choose a snippet plugin
" Plug 'Shougo/neosnippet.vim'
" " ---------------------------------------------------

" Plug 'msanders/snipmate.vim'
" " ---------------------------------------------------

" Plug 'spf13/snipmate-snippets'
" " ---------------------------------------------------

" undotree: invoke by <Leader>u
" ---------------------------------------------------
Plug 'mbbill/undotree'

nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1
let g:undotree_WindowLayout = 4

" NOTE: this will prevent undotree closed then jump to minibufexpl
function! g:CloseUndotree()
    call UndotreeHide()
    call ex#window#goto_edit_window()
endfunction

function g:Undotree_CustomMap()
    if has('gui_running')
        nnoremap <silent> <script> <buffer> <ESC> :call g:CloseUndotree()<CR>
    else
        nnoremap <silent> <script> <buffer> <leader><ESC> :call g:CloseUndotree()<CR>
    endif
endfunction

" tabular: invoke by <leader>= alignment-character
" ---------------------------------------------------
Plug 'godlygeek/tabular'

nnoremap <silent> <leader>= :call g:Tabular(1)<CR>
xnoremap <silent> <leader>= :call g:Tabular(0)<CR>
function! g:Tabular(ignore_range) range
    let c = getchar()
    let c = nr2char(c)
    if a:ignore_range == 0
        exec printf('%d,%dTabularize /%s', a:firstline, a:lastline, c)
    else
        exec printf('Tabularize /%s', c)
    endif
endfunction

" vim-easymotion: invoke by <leader><leader> w,b,e,ge,f,F,h,i,j,k,/
" ---------------------------------------------------
Plug 'Lokaltog/vim-easymotion'

map <leader><leader>/ <Plug>(easymotion-sn)
omap <leader><leader>/ <Plug>(easymotion-tn)
map <leader><leader>j <Plug>(easymotion-j)
map <leader><leader>k <Plug>(easymotion-k)
map <leader><leader>l <Plug>(easymotion-lineforward)
map <leader><leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" LargeFile
" ---------------------------------------------------
Plug 'vim-scripts/LargeFile'
let g:LargeFile= 5 " files >= 5MB will use LargeFile rules

"}}}

" DISABLE: I'm using GistBox https://app.gistboxapp.com/ instead
" " gist-vim: Invoke by :Gist
" ---------------------------------------------------
" Plug 'mattn/webapi-vim'
" Plug 'mattn/gist-vim'

" c-lang {{{

" ex-cref: invoke by <leader>cr
" ---------------------------------------------------
Plug 'exvim/ex-cref'

" this is modified for default c syntax highlight settings
" make it don't highlight error pattern
let c_gnu = 1
let c_no_curly_error = 1
let c_no_bracket_error = 1

"}}}

" web {{{

Plug 'ntpeters/vim-better-whitespace'
nnoremap <unique> <leader>w :StripWhitespace<CR>

" ex-typescript
" ---------------------------------------------------
Plug 'exvim/ex-typescript'

" emmet-vim
" ---------------------------------------------------
Plug 'mattn/emmet-vim'

" make sure emmet only enable in html,css files
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" vim-indent-guides: invoke by <leader>ig
" ---------------------------------------------------
Plug 'nathanaelkane/vim-indent-guides'

let g:indent_guides_guide_size = 1

" vim-javascript
" ---------------------------------------------------
Plug 'pangloss/vim-javascript'

" vim-coffee-script
" ---------------------------------------------------
Plug 'kchmck/vim-coffee-script'

" vim-html
" ---------------------------------------------------
Plug 'exvim/ex-indenthtml.vim'


" DISABLE: Slow to open big css file
" vim-css-color
" ---------------------------------------------------
" Plug 'skammer/vim-css-color'

" vim-css3-syntax
Plug 'hail2u/vim-css3-syntax'

" vim-less
" ---------------------------------------------------
Plug 'groenewege/vim-less'

" vim-stylus
" ---------------------------------------------------
Plug 'wavded/vim-stylus'

" vim-markdown
" ---------------------------------------------------
Plug 'plasticboy/vim-markdown'

let g:vim_markdown_initial_foldlevel=9999

"}}}

" TEST {{{
" " test-loading
" echomsg "test-loading: .vimrc"
" Plug 'exvim/test-loading'
"}}}

" vim:ts=4:sw=4:sts=4 et fdm=marker:
